- (DONE) read input from a text file
- (DONE) divide info for the different robots
- (DONE) check all robot's starting positions are inside the map
- (DONE) get final position for all robots
- (DONE) be able to mark the "scent" square and don't let following robots fall from there
- (DONE)print on the screen the final positions
- (DONE)coordenates update (max num)
- (DONE)if a robot tries to leave the map where another robot has already left, we ignore that instruction and we continue with the next one.

- json for persistence layer
- mongodb for fancier persitence layer
- when we print the grid in the command line it's upside down.
- read input typed in on the web page
- (maybe) set a max number of robots
- keep in mind computational complexity (clean code, basically)
-api

- tests (mocha)
npm i --save-dev chai



- calculate path (almost)
- calculate number of squares
- count the number of iterations
- statistics to show as api endpoints of information

mongodb+srv://marinatorelli:<password>@cluster0.tiell.mongodb.net/myFirstDatabase?retryWrites=true&w=majority